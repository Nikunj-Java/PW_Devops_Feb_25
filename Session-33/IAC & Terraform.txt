*****************************************************************************
IAC- Infrastructure As Code
*****************************************************************************

It is a method of managing and provisioning IT Infrastructure (server, networks,storage and databases) manage using files rather than mannual process

DevOps team can manage the entire infrastructure settings using IAC efficiently.

Key Principles
----------------------------------
1. Declarative approach: define the requirenment with state and system automatically adjust configuration to match

2. Imperative Approach: Specify step by step instructions to get the desired requirenments.

3. Version Control: Maintains the versioning

4. Automation: We can Automate Everything using IAC 

5. Scalability: Scale the Infrastructure

Tyeps of IAC
----------------------------------
1. Configuration Management:
    -- manage software installation
    -- Ansible, Chef, Puppet
2. Orchastation & provisioning:
    -- Resourse Creation and Manage multiple cloud providers
    -- Terraform
3. Container Orchastation:
    -- manage containerized application and deployments
        -- kubernetes and Docker, docker compose
USE Cases:
----------------------------------
1. Deploy Resources on AWS, Azure and Google cloud
2. Maintain environments for developement, testing and production



**********************************************************************************
Terraform
**********************************************************************************
- it is IAC tool
- it manages all cloud infrastructure in a declarative approach

1. Configuration Files:
----------------------------------------
    -- it uses .tf files for define infrastructure
    -- it is written in HCL (HashiCorp Configuration Language) Language
    -- In VS Code install Extensions: HashiCorp Terraform

2. Providers:
----------------------------------------
    -- Allow your Terraform to interact with cloud platforms like GCP,AWS, Azure etc...

    providers "aws"{
        region ="us-east-1"
    }

3. Resources:
----------------------------------------
resources "aws_instance" "example"{
    ami="image_id"
    instance_type="t2.micro"
}

4. Variables:
----------------------------------------
    -- Variables allows paramterization and make your code dynamic.

    variable "instance_type"{
        default="t2.micro"
    }

    resource "aws_instance" "example"{
        ami= "ami-123456789"
        instance_type=var.instance_type
    }

    (create variable once and use it at multiple configuration)

5. Outputs:
----------------------------------------

-- displays usefull information once infrastructure is deployed

    output "instance_ip"{
        value="aws_instance.example.public_ip"
    }


6. State Management:
----------------------------------------
    -- store Terraform state
            terraform.tfstate
    -- track the resource changes(you can track using state manage)

7. Work Flow
----------------------------------------

    Step:1 initialize working directory: terrform initiate
    Step:2 show execution plan: terraform plan
    Step:3 create or update the infrastructure: terraform apply
    step:4 delete resources: terraform destroy

8. Terraform installation
-----------------------------------------
link: https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli

> sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
> wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg > /dev/null
> gpg --no-default-keyring --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg --fingerprint
> echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(grep -oP '(?<=UBUNTU_CODENAME=).*' /etc/os-release || lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
> sudo apt update
> sudo apt-get install terraform

8. Running Terraform
----------------------------------
create new folder and create file with name "main.tf"
add the given code attached here

open >wsl> execute the command
> terraform init
> terraform plan
> terraform apply